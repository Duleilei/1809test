1.赋值运算符

+= ; -= ; *= ; /= ; %= ; **= ; .= ;
右侧最终结果,赋值给左侧,再与之前的表达式进行运算
.= 点等 拼接运算符


2.拼接


3.比较运算符

执行结果一定为布尔值
只能接收一个条件的判断比较
>,<,<=,>=,==,===,!=, !==, 


4.自增/自减运算符

++/--
前缀,先自增/自减,再执行其他运算操作
后缀,先执行其他运算操作,再自增/自减
项目中禁止使用字符串的自增自减
null直接进行--,是不支持的
直接进行++,会变成int整数类型,之后再进行++/--,就可以进行操作


5.逻辑运算符

执行结果是布尔类型
使用if语句
&&   逻辑与   --并且(两个条件都为true)
||   逻辑或   --或者(两个条件有一个为true,最终结果就为true)
!    逻辑非   --取结果的相反值
xor  逻辑异或  两个表达式结果相同,为false,不同为true

逻辑非:
!true  --- false
!false --- true

注意:
!5>3 
:5不是bool,转化为布尔值为true,
!5取反是false,false>3,
false转化为数值为0,0>3为false;

!(5>3)
是对(5>3)的结果进行取反,true取反是false

$int1=100;
$int2=100;
var_dump($ int1++ = $int2 && $int1 = $int2);
结果为bool(false)

思路:后缀,先赋值,后相加,$$后$int1=101,所以$int1=$int2为false,最终结果为false

逻辑异或:相同为false,不同为true
var_dump(true xor true)   --- false
var_dunp(true xor false)  --- true


6.短路求值

 两个表达式,第一个表达式已经决定整个表达式的结果,那第二个表达式不会被执行

面试题:
$a=10;
$b=10;
if($a=10 || $b=20){
   $a++;
   $b++;
   }
   echo $a, $b;   结果为1  11    

解析:
    $a = 10 || $b = 20 是一个赋值表达式

    将这个逻辑运算的结果赋值给$a

    $a = ( 10 || $b = 20 )

    10转化为布尔值为true,所以整个表达式的结果为true,
    将true赋值给$a,也就是表达式为if($a=true)执行$a++;$b++;
    $a++  true++  布尔值不执行自增操作  结果仍然是true
    $b++  10++ $b为11
    $a的值为true,所以$a输出的值为1;$b输出的值为11


7.pre以源码的格式输出


8.三元运算符

语法:
expre1表达式1 ? expre2表达式2 : expre3表达式3 ;

表达式1结果为true,执行表达式2;如果表达式1结果为false,执行表达式3

就是简写的if表达式

写法一:
echo $num % 2 != 0 ? "{$num}为奇数" : "{$num}不是奇数" ;

写法二:
$str=$num % 2 != 0 ? "{$num}是奇数" : "{$num}不是奇数" ;
echo $str;

实际项目中,简单的if语句,使用三元运算法;

三元运算法的简写方式

(1).expr1 ?? expr2;

expr1为null,执行expr2;
expr1不为null,执行expr1;
null,实际中会给变量设定默认值.如果没有赋值,变量没有数值,默认为null


(2).expr1 ?: expr2;

expr1为false,执行expr2;
expr1为true,执行expr1;



9.PHP运算符的优先级
基本情况    (1)一元运算符>二元运算符>三元运算符
           (2)算数>比较>逻辑
特殊情况:  (1)短路求值
           (2)使用小括号包裹的内容会优先执行









	









